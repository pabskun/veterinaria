/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capaPresentacion;

import capaLogica.*;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pabs
 */
public class listarMascotasCliente extends javax.swing.JPanel {

    /**
     * Creates new form listarClientes
     */
    public listarMascotasCliente() {
        initComponents();
        ArrayList<Cliente>  listaClientes = pantallaMenu.gestor.getListaClientes();
        for(Cliente objCliente : listaClientes) {
            cmbClientes.addItem(objCliente.getIdentificacion());
            
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMascotas = new javax.swing.JTable();
        cmbClientes = new javax.swing.JComboBox<>();

        jLabel1.setText("Listar mascotas");

        tblMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificaci√≥n", "Nombre", "Tipo", "Raza"
            }
        ));
        jScrollPane2.setViewportView(tblMascotas);

        cmbClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClientesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClientesItemStateChanged
        // TODO add your handling code here:
        
       mostrarTabla(cmbClientes.getSelectedItem().toString());
    }//GEN-LAST:event_cmbClientesItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbClientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMascotas;
    // End of variables declaration//GEN-END:variables

    private void mostrarTabla(String pidCliente) {
        limpiarTabla();
        DefaultTableModel model = (DefaultTableModel) tblMascotas.getModel();
        ArrayList<Mascota> listaMascotas = pantallaMenu.gestor.getListaMascotasCliente(pidCliente);
        Object rowData[] = new Object[3];
        for (int i = 0; i < listaMascotas.size(); i++) {
            rowData[0] = listaMascotas.get(i).getIdentificacion();
            rowData[1] = listaMascotas.get(i).getNombre();
            rowData[2] = listaMascotas.get(i).getTipo();
            rowData[2] = listaMascotas.get(i).getRaza();
            model.addRow(rowData);
        }
    }

    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) tblMascotas.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
}
